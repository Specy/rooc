problem = {
    SOI ~ nl* ~
    #objective = objective  ~ nl+ ~
    (^"s.t." | ^"subject to") ~ nl+ ~
    #constraints = constraint_list ~
    (
    	nl+ ~
    	^"where" ~ nl+ ~
    	#where = consts_declaration
    )? ~
    (
    	nl+ ~
    	^"define" ~ nl+ ~
    	#define = domains_declaration
    )? ~
    nl* ~
    EOI
}
// required problem body
objective = { (
  #objective_type = objective_type ~
  #objective_body = tagged_exp
  ) | (
  #objective_type = solve
  )
}
solve = @{ ^"solve" }
constraint_list = { (constraint ~ (nl* ~constraint)*)?}
// constraint
constraint = {
  #constraint_name = (constraint_name)? ~
  #constraint_lhs = (tagged_exp) ~
  #constraint_relation = comparison ~
  #constraint_rhs = tagged_exp ~
  #constraint_iteration = (nl* ~ for_iteration)?
}
constraint_name = {
    variable ~ ":" ~ nl*
}
	
    

// constants declaration
consts_declaration = { (const_declaration ~(nl* ~ const_declaration)*)? }
const_declaration  = {
  "let" ~
  #name = (simple_variable | "_") ~
  "=" ~
  #value = tagged_exp
}

domains_declaration = { (domain_declaration ~ (nl* ~domain_declaration)*)? }
domain_declaration = {
  #vars = domain_variables ~ nl*~
  ^"as" ~
  #as_type = as_assertion ~
  #iteration = (nl* ~ for_iteration)?
}
domain_variables = { (variable ~ comma ~ nl*)* ~ variable }
as_assertion = {
    #type = (!keyword ~ as_type) ~
    #values = (as_value?)
}
as_value = { "(" ~ (tagged_exp ~ comma)* ~ tagged_exp ~ ")" }
as_type = @{  LETTER ~ (LETTER | NUMBER)* }
// iterations
for_iteration          = _{ ^"for" ~ iteration_declaration_list }
iteration_declaration_list = { (iteration_declaration ~ comma)* ~ iteration_declaration }
iteration_declaration      =  {
  #tuple = (simple_variable | tuple)  ~
  ^"in" ~
  #iterator = iterator
}
tuple = { "(" ~ (simple_variable | no_par) ~ (comma ~ (simple_variable | no_par))* ~ ")"  }
iterator = { range_iterator | tagged_exp }
//iterators
range_iterator = {
  #from = (tagged_exp) ~
  #range_type = range_type ~
  #to = (tagged_exp)
}

// expressions
tagged_exp = { exp }
exp         = _{ unary_op? ~ exp_leaf ~ (binary_op ~ unary_op? ~ exp_leaf)* }
exp_leaf    = _{  block_scoped_function | block_function | function | implicit_mul | parenthesis | modulo  | array_access | primitive | variable  }
implicit_mul = {
	(number | parenthesis | modulo){2,} ~ variable? |
  (number | parenthesis | modulo) ~ variable
}
modulo      =  { "|" ~ exp ~ "|" }
parenthesis =  { "(" ~ exp ~ ")" }
function = {  #function_name = function_name ~ "(" ~ #function_pars = function_pars ~ ")"}
function_pars = { (tagged_exp ~(comma ~ tagged_exp)*)?}
//currently the only non ambiguous implied multiplications
//implied_mul = { primitive ~ variable | primitive ~ parenthesis}
// block functions
block_function = {
	#name = function_name ~
    "{" ~ nl* ~ #body = comma_separated_exp ~ nl* ~"}"
}
block_scoped_function = {
	#name = function_name ~
    "(" ~ nl* ~ #range = iteration_declaration_list ~ nl* ~")" ~
    "{" ~ nl* ~ #body = tagged_exp ~ nl* ~ "}"
}
// pointer access var[i][j] or var[0] etc...
array_access        = {
  #name = simple_variable ~
  #accesses = pointer_access_list
}
pointer_access_list = { (pointer_access)+ }
pointer_access      = _{ ^"[" ~ tagged_exp ~ ^"]" }
// constants
primitive = { _primitive }
_primitive = _{ number | array | graph | boolean | string }
graph = { ^"Graph" ~ "{" ~nl* ~ #body = graph_node_list ~ nl* ~ "}" }
graph_node_list = { graph_node? ~ (comma ~ graph_node)* }
graph_node = { #name = simple_variable ~ ( "->" ~ "[" ~ #edges = edges_list ~ "]")?}
edges_list = {  (edge ~ comma)* ~ edge?}
edge = { #node = simple_variable ~ (":" ~ #cost = signed_number)? }
array    =  { ("[" ~ nl* ~ ((_primitive ~ comma)* ~ _primitive) ~ nl* ~ "]") | ("[" ~ nl* ~ "]") }
// utilities
comma_separated_exp = { (tagged_exp ~ comma)* ~ tagged_exp }
comma = _{ "," ~ nl* }
nl = _{NEWLINE}
variable       = _{ !(keyword) ~ (compound_variable | simple_variable | escaped_compound_variable) }
// terminal characters
objective_type = @{ ^"min" | ^"max" }
comparison     = @{ "<=" | ">=" | "=" | "<" | ">" }
simple_variable   = @{ "$"? ~ LETTER ~ (LETTER | NUMBER)* }

escaped_compound_variable = { "\\" ~ compound_variable }
compound_variable = { simple_variable? ~ ("_" ~ compound_variable_body)+ }
compound_variable_body = _{ (simple_variable | number) | "{" ~ nl* ~ (tagged_exp) ~ nl* ~ "}" }
number    = _{ float | integer }
integer = @{ '0'..'9'+ }
float    = @{ '0'..'9'+ ~ "." ~ ('0'..'9')+ }
signed_number = @{ "-"? ~ number}
keyword = { "for " | "min " | "max " | "where " | "true " | "false " | "in " | "as " | "define " | "let " | "solve "}
binary_op = _{ mul | add | sub | div }
mul = { "*" }
add = { "+" }
sub = { "-" }
div = { "/" }

unary_op  = _{ neg }
neg = { "-" }

string = ${ "\"" ~ inner_string ~ "\"" }
inner_string = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
boolean = @{ ^"true" | ^"false" }
function_name = @{ LETTER+ ~ ("_" ~ (LETTER | NUMBER)+)*}
// ignore whitespace in whole grammar
WHITESPACE = _{ " " | "\t" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!nl ~ ANY)*)}
range_type = @{ "..=" | ".." }
no_par = @{ "_" }