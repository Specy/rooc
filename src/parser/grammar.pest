problem = {
    SOI ~
    #objective = objective ~ nl+ ~
    ^"s.t." ~ nl+ ~
    #conditions = condition_list ~
    (nl+ ~
    ^"where" ~ nl+ ~
    #where = consts_declaration)? ~
     EOI
}
// required problem body
objective = {
  #objective_type = objective_type ~
  #objective_body = tagged_exp
}
condition_list = { (condition ~ nl+)* ~ condition }
// condition
condition = {
  #lhs = (tagged_exp) ~
  #relation = comparison ~
  #rhs = tagged_exp ~
  (#iteration = for_iteration)?
}
// constants declaration
consts_declaration = { (const_declaration ~ nl+)* ~ const_declaration }
const_declaration  = {
  #name = simple_variable ~
  "=" ~
  #value = primitive
}

// iterations
for_iteration          = _{ (^"for" | "∀") ~ iteration_declaration_list }
iteration_declaration_list = { (iteration_declaration ~ comma)* ~ iteration_declaration }
iteration_declaration      =  {
  #tuple = (simple_variable | tuple)  ~
  (^"in" | "∈") ~
  #iterator = iterator
}
tuple = { "(" ~ (simple_variable | no_par) ~ (comma ~ (simple_variable | no_par))* ~ ")"  }
iterator = { range_iterator | tagged_exp }
//iterators
range_iterator = {
  #from = (tagged_exp) ~
  #range_type = range_type ~
  #to = (tagged_exp)
}

// expressions
tagged_exp = { exp }
exp         = _{ unary_op? ~ exp_body ~ (binary_op ~ unary_op? ~ exp_body)* }
exp_body    = _{ block_scoped_function | block_function | function | parenthesis | modulo  | array_access | primitive | variable }
modulo      =  { "|" ~ exp ~ "|" }
parenthesis =  { "(" ~ exp ~ ")" }
function = {  #function_name = function_name ~ "(" ~ #function_pars = function_pars ~ ")"}
function_pars = { (tagged_exp ~(comma ~ tagged_exp)*)?}
function_name = { LETTER ~ (LETTER | NUMBER | "_")*}
// block functions
block_function = {
	#name = function_name ~
    "{" ~ nl* ~ #body = comma_separated_exp ~ nl* ~"}"
}	
block_scoped_function = {
	#name = function_name ~ 
    "(" ~ nl* ~ #range = iteration_declaration_list ~ nl* ~")" ~ 
    "{" ~ nl* ~ #body = tagged_exp ~ nl* ~ "}"
}
// pointer access var[i][j] or var[0] etc...
array_access        = {
  #name = simple_variable ~
  #accesses = pointer_access_list
}
pointer_access_list = { (pointer_access)+ }
pointer_access      = _{ ^"[" ~ tagged_exp ~ ^"]" }
// constants
primitive = { _primitive }
_primitive = _{ number | array | graph | boolean | string }
graph = { ^"Graph" ~ "{" ~nl* ~ #body = graph_node_list ~ nl* ~ "}" }
graph_node_list = { graph_node? ~ (comma ~ graph_node)* }
graph_node = { #name = simple_variable ~ ( "->" ~ "[" ~ #edges = edges_list ~ "]")?}
edges_list = {  (edge ~ comma)* ~ edge?}
edge = { #node = simple_variable ~ (":" ~ #cost = signed_number)? }
array    =  { "[" ~ nl* ~ ((_primitive ~ comma)* ~ _primitive) ~ nl* ~ "]" }
// utilities
comma_separated_exp = { (tagged_exp ~ comma)* ~ tagged_exp }
comma = _{ "," ~ nl? }
nl = _{NEWLINE}
variable       = _{ compound_variable | simple_variable }
// terminal characters
objective_type = @{ ^"min" | ^"max" }
comparison     = @{ "<=" | ">=" | "=" }
// should I make this not a terminal so that i can get variable > compound_variable?
simple_variable   = @{ LETTER+ ~ (NUMBER)* }
compound_variable = @{ simple_variable ~ ("_" ~ LETTER+)+ }
// maybe i should do ("_" ~ LETTER+)+
number    = @{ '0'..'9'+ ~ ("." ~ '0'..'9'+)? }
signed_number = @{ "-"? ~ number}
binary_op = @{ "*" | "+" | "-" | "/" }
unary_op  = @{ "-" }
string = @ { "\"" ~ LETTER* ~ "\""}
boolean = @{ ^"true" | ^"false" }
// ignore whitespace in whole grammar
WHITESPACE = _{ " " | "\t" }
range_type = @{ "..=" | ".." }
no_par = @{ "_" }